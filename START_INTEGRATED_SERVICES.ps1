# PromptForge - Start All Integrated Services
# This script starts all backend microservices and the frontend

Write-Host "========================================" -ForegroundColor Cyan
Write-Host " PromptForge - Backend Integration" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Function to start a service in a new window
function Start-Service {
    param(
        [string]$ServiceName,
        [string]$ServicePath,
        [int]$Port
    )
    
    Write-Host "Starting $ServiceName on port $Port..." -ForegroundColor Yellow
    
    $command = "cd '$ServicePath'; Write-Host '=== $ServiceName (Port $Port) ===' -ForegroundColor Green; mvn spring-boot:run"
    
    Start-Process powershell -ArgumentList "-NoExit", "-Command", $command
    
    Start-Sleep -Seconds 2
}

# Get the script directory
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$backendDir = Join-Path $scriptDir "backend"
$frontendDir = Join-Path $scriptDir "frontend"

# Start backend services
Write-Host ""
Write-Host "Starting Backend Services..." -ForegroundColor Green
Write-Host "----------------------------" -ForegroundColor Green

Start-Service "User Service" (Join-Path $backendDir "user-service") 9001
Start-Service "Prompt Service" (Join-Path $backendDir "prompt-service") 9002
Start-Service "Test Service" (Join-Path $backendDir "test-service") 9003
Start-Service "Marketplace Service" (Join-Path $backendDir "marketplace-service") 9004

Write-Host ""
Write-Host "Waiting 45 seconds for services to start..." -ForegroundColor Yellow
Write-Host ""

# Show progress bar
for ($i = 1; $i -le 45; $i++) {
    $percent = ($i / 45) * 100
    Write-Progress -Activity "Starting Backend Services" -Status "$i/45 seconds" -PercentComplete $percent
    Start-Sleep -Seconds 1
}

Write-Progress -Activity "Starting Backend Services" -Completed

# Check if services are up
Write-Host ""
Write-Host "Checking Service Health..." -ForegroundColor Green
Write-Host "----------------------------" -ForegroundColor Green

$services = @(
    @{Name="User Service"; Port=9001},
    @{Name="Prompt Service"; Port=9002},
    @{Name="Test Service"; Port=9003},
    @{Name="Marketplace Service"; Port=9004}
)

$allHealthy = $true

foreach ($service in $services) {
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:$($service.Port)/actuator/health" -TimeoutSec 5 -ErrorAction SilentlyContinue
        if ($response.status -eq "UP") {
            Write-Host "✓ $($service.Name) is UP on port $($service.Port)" -ForegroundColor Green
        } else {
            Write-Host "✗ $($service.Name) is $($response.status) on port $($service.Port)" -ForegroundColor Yellow
            $allHealthy = $false
        }
    } catch {
        Write-Host "✗ $($service.Name) is NOT responding on port $($service.Port)" -ForegroundColor Red
        $allHealthy = $false
    }
}

Write-Host ""

if (-not $allHealthy) {
    Write-Host "WARNING: Some services are not healthy yet." -ForegroundColor Yellow
    Write-Host "Please wait a bit longer or check the service windows for errors." -ForegroundColor Yellow
    Write-Host ""
}

# Create/Update frontend .env.local
Write-Host "Configuring Frontend..." -ForegroundColor Green
Write-Host "----------------------------" -ForegroundColor Green

$envContent = @"
# Frontend Environment Configuration
# Auto-generated by START_INTEGRATED_SERVICES.ps1

# API Mode (set to false to use real backend services)
VITE_USE_MOCK_API=false

# Microservices URLs
VITE_USER_SERVICE_URL=http://localhost:9001
VITE_PROMPT_SERVICE_URL=http://localhost:9002
VITE_TEST_SERVICE_URL=http://localhost:9003
VITE_MARKETPLACE_SERVICE_URL=http://localhost:9004

# Legacy API Base URL (defaults to User Service)
VITE_API_BASE_URL=http://localhost:9001
"@

$envPath = Join-Path $frontendDir ".env.local"
Set-Content -Path $envPath -Value $envContent -Encoding UTF8
Write-Host "✓ Created $envPath" -ForegroundColor Green

# Start frontend
Write-Host ""
Write-Host "Starting Frontend..." -ForegroundColor Green
Write-Host "----------------------------" -ForegroundColor Green

$frontendCommand = "cd '$frontendDir'; Write-Host '=== Frontend (Vite Dev Server) ===' -ForegroundColor Green; npm run dev"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $frontendCommand

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host " All Services Started!" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Backend Services:" -ForegroundColor Yellow
Write-Host "  - User Service:        http://localhost:9001" -ForegroundColor White
Write-Host "  - Prompt Service:      http://localhost:9002" -ForegroundColor White
Write-Host "  - Test Service:        http://localhost:9003" -ForegroundColor White
Write-Host "  - Marketplace Service: http://localhost:9004" -ForegroundColor White
Write-Host ""
Write-Host "Frontend:" -ForegroundColor Yellow
Write-Host "  - Application:         http://localhost:5173" -ForegroundColor White
Write-Host ""
Write-Host "API Documentation (Swagger):" -ForegroundColor Yellow
Write-Host "  - User Service:        http://localhost:9001/swagger-ui.html" -ForegroundColor White
Write-Host "  - Prompt Service:      http://localhost:9002/swagger-ui.html" -ForegroundColor White
Write-Host "  - Test Service:        http://localhost:9003/swagger-ui.html" -ForegroundColor White
Write-Host "  - Marketplace Service: http://localhost:9004/swagger-ui.html" -ForegroundColor White
Write-Host ""
Write-Host "Press any key to exit this window..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")



